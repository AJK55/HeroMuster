{
	"info": {
		"_postman_id": "2be0201a-cfa2-43e0-95c2-5535e8dad63e",
		"name": "HeroMuster",
		"description": "https://documenter.getpostman.com/view/2899728/heromuster-open-legend-api/7187afM?_ga=2.185710895.763695680.1534878107-1987030645.1534878107\n\n",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Character Builder",
			"item": [
				{
					"name": "Character by Character ID ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2776ef95-5695-4ee9-b4c7-97baf0d7a844",
								"type": "text/javascript",
								"exec": [
									"pass = true;",
									"fail = false;",
									"",
									"var data = JSON.parse(responseBody);",
									"var a = Object.keys(data.meta).length",
									"var b = Object.keys(data.success.character).length",
									"var c = data.success.characterid",
									"var d = environment.characterid",
									"var e = data.success.character.playername",
									"var f = data.meta.status",
									"",
									"if (f === \"success\") {",
									"    tests[\"Successful Run\"] = pass;",
									"}",
									"else",
									"    tests[\"Successful Run\"] = fail;",
									"//console.log(e)",
									"//console.log(data)",
									"",
									"if (a === 3) {",
									"    tests[\"Number of meta objects = \" + a] = pass;",
									"}",
									"else ",
									"    tests[\"Number of meta objects = \" + a] = fail;",
									"    ",
									"if (b === 123) {",
									"    tests[\"Number of character objects = \" + b ] = pass;",
									"}",
									"else",
									"    tests[\"Number of character objects = \" + b ] = fail;",
									"",
									"if (c === d) {",
									"    tests[\"Character ID = \" + d] = pass;",
									"}",
									"else",
									"    tests[\"Character ID = \" + d] = fail;",
									"",
									"if (environment.playerid === e) {",
									"    tests[\"PlayerName Matches PlayerID\"] = pass;",
									"}",
									"else if (environment.playerid != e) {",
									"    pm.environment.set(\"playerid\", e);",
									"    tests[\"PlayerName != PlayerID - Updated it\"] = pass;",
									"}",
									"else",
									"    tests[\"PlayerName Matches PlayerID\"] = fail;",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "https://openlegend.heromuster.com/api/character/{{characterid}}",
							"protocol": "https",
							"host": [
								"openlegend",
								"heromuster",
								"com"
							],
							"path": [
								"api",
								"character",
								"{{characterid}}"
							]
						},
						"description": "https://openlegend.heromuster.com/api/character/{{characterid}}\r\n\r\nReturn a specific character by its unique {{characterid}}. This is represented after character?s={{characterid}} when viewing through the website.\r\n"
					},
					"response": []
				},
				{
					"name": "Characters by Player ID ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "08be952c-3418-4053-b01d-e2070e04c88e",
								"exec": [
									"pass = true;",
									"fail = false;",
									"",
									"var data = JSON.parse(responseBody);",
									"var a = Object.keys(data.success.characters);",
									"//var b = (a.includes(environment.characterid));",
									"var c = data.success.total",
									"var d = a.length //7",
									"var e = data.meta.status",
									"var f = environment.characterid",
									"//var g = data.success.characters[f.toString()];",
									"//var h = g.characterid",
									"//console.log(data.success.characters[f.toString()])",
									"//var i = data.success.characters[f.toString()].character",
									"//var j = Object.keys(i)",
									"//console.log(data)",
									"//console.log(f)",
									"//console.log(g)",
									"//console.log(j)",
									"//console.log(Object.keys(i).length)",
									"",
									"if (e === \"success\") {",
									"    tests[\"Successful Run\"] = pass;",
									"}",
									"else",
									"    tests[\"Successful Run\"] = fail;",
									"",
									"/*",
									"if (b) {",
									"    tests[\"Character ID included\"] = pass;",
									"}",
									"else",
									"    tests[\"Character ID included\"] = fail;",
									"*/",
									"",
									"if (d === c) {",
									"    tests[\"Number of characters returned equals total\"] = pass;",
									"}",
									"else",
									"    tests[\"Number of characters returned equals total\"] = fail;",
									"/*",
									"if (f === h) {",
									"    tests[\"Environment.CharacterID passed correctly = \" + h] = pass;",
									"}",
									"else",
									"    tests[\"Environment.CharacterID passed correctly = \" + h] = fail;",
									"*/",
									"/*",
									"if (j.length === 123) {",
									"    tests[\"Number of objects returned for 813c772eb675 is correct = \" + j.length] = pass;",
									"}",
									"else",
									"    tests[\"Number of objects returned for 813c772eb675 is correct = \" + j.length] = fail;",
									"*/",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "121ac6ef-cccb-49ed-9f1a-bc88f042a178",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "https://openlegend.heromuster.com/api/player/{{playerid}}",
							"protocol": "https",
							"host": [
								"openlegend",
								"heromuster",
								"com"
							],
							"path": [
								"api",
								"player",
								"{{playerid}}"
							]
						},
						"description": "https://openlegend.heromuster.com/api/player/{{playerid}}\r\n\r\nView all characters created by a specific player, determined by the Player Name field in the Character Builder. The Player Name is automatically converted into the {{playerid}}. This is represented after player?p={{playerid}} when viewing through the website.\r\n"
					},
					"response": []
				},
				{
					"name": "Recent Characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a8e3755b-65e8-4fc1-9951-bf38b796b14c",
								"type": "text/javascript",
								"exec": [
									"pass = true;",
									"fail = false;",
									"",
									"var data = JSON.parse(responseBody);",
									"var a = data.success.total;",
									"var b = data.success.characters;",
									"var c = Object.keys(b).length;",
									"var d = Object.keys(b);",
									"var e = environment.characterid;",
									"var f = d.includes(e);",
									"var g = data.meta.status",
									"//console.log(data)",
									"",
									"if (g === \"success\") {",
									"    tests[\"Successful Run\"] = pass;",
									"}",
									"else",
									"    tests[\"Successful Run\"] = fail;",
									"",
									"",
									"if (a === c) {",
									"    tests[\"Number of characters returned equals total number\"] = pass;",
									"}",
									"else ",
									"    tests[\"Number of characters returned equals total number\"] = fail;",
									"",
									"if (f === false) {",
									"    tests[\"Not included in returned characters - \" + e] = pass;",
									"}",
									"else ",
									"    tests[\"Not included in returned characters - \" + e] = fail;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "https://openlegend.heromuster.com/api/all",
							"protocol": "https",
							"host": [
								"openlegend",
								"heromuster",
								"com"
							],
							"path": [
								"api",
								"all"
							]
						},
						"description": "https://openlegend.heromuster.com/api/all\r\n\r\nReturn the most recent 50 character sheets created using the Character Builder.\r\n"
					},
					"response": []
				},
				{
					"name": "Recent Characters (Pagination) ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b2827d66-b02b-4224-b36a-3f4b9164cd96",
								"type": "text/javascript",
								"exec": [
									"console.log(environment.startnumberA)",
									"",
									"pass = true;",
									"fail = false;",
									"",
									"var data = JSON.parse(responseBody);",
									"var a = data.success.total;",
									"var b = data.success.characters;",
									"var c = Object.keys(b).length;",
									"var d = Object.keys(b);",
									"var e = environment.characterid;",
									"var f = d.includes(e);",
									"var g = data.meta.status",
									"var h = data.meta.query.replace(\"/api/all/\", \"\")",
									"var i = environment.startnumberA",
									"",
									"",
									"if (h == i) {",
									"    tests[\"StartNumberA in query matches environment\"] = pass;",
									"}",
									"else",
									"    tests[\"StartNumberA in query matches environment\"] = fail;",
									"",
									"if (g === \"success\") {",
									"    tests[\"Successful Run\"] = pass;",
									"}",
									"else",
									"    tests[\"Successful Run\"] = fail;",
									"",
									"",
									"if (a === c) {",
									"    tests[\"Number of characters returned equals total number\"] = pass;",
									"}",
									"else ",
									"    tests[\"Number of characters returned equals total number\"] = fail;",
									"",
									"if (f === false) {",
									"    tests[\"Not included in returned characters - \" + e] = pass;",
									"}",
									"else ",
									"    tests[\"Not included in returned characters - \" + e] = fail;"
								]
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6b1a4189-688b-4b4c-b415-d7a69347f6d9",
								"type": "text/javascript",
								"exec": [
									"/**",
									" * Returns a random integer between min (inclusive) and max (inclusive)",
									" * Using Math.round() will give you a non-uniform distribution!",
									" */",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"///max is 2153",
									"var a = getRandomInt(1, 31500);",
									"",
									"pm.environment.set(\"startnumberA\", a);"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "https://openlegend.heromuster.com/api/all/{{startnumberA}}",
							"protocol": "https",
							"host": [
								"openlegend",
								"heromuster",
								"com"
							],
							"path": [
								"api",
								"all",
								"{{startnumberA}}"
							]
						},
						"description": "https://openlegend.heromuster.com/api/all/{{startnumber}}\r\n\r\nView recent characters created using the Character Builder, but specify the numeric starting position.\r\nReturns 50 results per request.\r\n"
					},
					"response": []
				}
			],
			"description": "https://openlegend.heromuster.com/character?s=dc7053a16984\n",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "aa96a2e6-1824-4288-92bf-b0328ee3041e",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "30b96895-ea3a-44d7-9221-cfa4e46d6106",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "NPC Generator",
			"item": [
				{
					"name": "Random NPC ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c7876425-25e7-43f3-a9af-14debc89064d",
								"type": "text/javascript",
								"exec": [
									"pass = true;",
									"fail = false;",
									"",
									"var data = JSON.parse(responseBody);",
									"var a = data.meta.status",
									"var b = data.success",
									"var c = Object.keys(b)",
									"//console.log(data)",
									"//console.log(c)",
									"",
									"if (a === \"success\") {",
									"    tests[\"Successful Run\"] = pass;",
									"}",
									"else",
									"    tests[\"Successful Run\"] = fail;",
									"",
									"if (c.length === 16) {",
									"    tests[\"Number of success objects = \" + c.length] = pass;",
									"}",
									"else",
									"    tests[\"Number of success objects = \" + c.length] = fail;",
									" ",
									" "
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "https://openlegend.heromuster.com/api/npc",
							"protocol": "https",
							"host": [
								"openlegend",
								"heromuster",
								"com"
							],
							"path": [
								"api",
								"npc"
							]
						}
					},
					"response": []
				},
				{
					"name": "Random NPC at a Specific Level ",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6c1dc110-b841-4e44-a05e-e19b4d70f986",
								"type": "text/javascript",
								"exec": [
									"/**",
									" * Returns a random integer between min (inclusive) and max (inclusive)",
									" * Using Math.round() will give you a non-uniform distribution!",
									" */",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"var a = getRandomInt(1, 20);",
									"",
									"pm.environment.set(\"level\", a);",
									"",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c323c4d1-5327-4559-aeb3-97312ef4ffff",
								"type": "text/javascript",
								"exec": [
									"console.log(environment.level);",
									"",
									"pass = true;",
									"fail = false;",
									"",
									"var data = JSON.parse(responseBody);",
									"var a = data.meta.status",
									"var b = data.success",
									"var c = Object.keys(b)",
									"var d = data.meta.query.replace(\"/api//npc/\", \"\")",
									"var e = environment.level",
									"//console.log(d)",
									"//console.log(c.length)",
									"",
									"if (a === \"success\") {",
									"    tests[\"Successful Run\"] = pass;",
									"}",
									"else",
									"    tests[\"Successful Run\"] = fail;",
									"    ",
									"if (c.length === 16) {",
									"    tests[\"Number of success objects = \" + c.length] = pass;",
									"}",
									"else",
									"    tests[\"Number of success objects = \" + c.length] = fail;",
									"",
									"if (d == e) {",
									"    tests[\"Quesry matches level\"] = pass;",
									"}",
									"else",
									"    tests[\"Quesry matches level\"] = fail;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "https://openlegend.heromuster.com/api//npc/{{level}}",
							"protocol": "https",
							"host": [
								"openlegend",
								"heromuster",
								"com"
							],
							"path": [
								"api",
								"",
								"npc",
								"{{level}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Extraordinary Item Builder",
			"item": [
				{
					"name": "Extraordinary Item by Item ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d5ff1c47-9eb1-4d71-b5f0-3c8174bcf8e6",
								"type": "text/javascript",
								"exec": [
									"pass = true;",
									"fail = false;",
									"",
									"var data = JSON.parse(responseBody);",
									"var a = data.meta.status",
									"var b = data.success.itemid",
									"var c = data.success.item",
									"var d = Object.keys(c)",
									"var e = c.idescription",
									"//console.log(data)",
									"//console.log(c.length)",
									"",
									"if (a === \"success\") {",
									"    tests[\"Successful Run\"] = pass;",
									"}",
									"else",
									"    tests[\"Successful Run\"] = fail;",
									"",
									"if (b === environment.itemid) {",
									"    tests[\"ItemID Matches - \" + b] = pass;",
									"}",
									"else",
									"    tests[\"ItemID Matches - \" + b] = fail;",
									"",
									"if (d.length === 11) {",
									"    tests[\"Number of items returned = \" + d.length] = pass;",
									"}",
									"else",
									"    tests[\"Number of items returnes = \" + d.length] = fail;",
									"",
									"if (e === \"This is the description of this item.\") {",
									"    tests[\"iDescription = \" + e] = pass;",
									"}",
									"else",
									"    tests[\"iDescription = \" + e] = fail;",
									"",
									"",
									"",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "https://openlegend.heromuster.com/api/item/{{itemid}}",
							"protocol": "https",
							"host": [
								"openlegend",
								"heromuster",
								"com"
							],
							"path": [
								"api",
								"item",
								"{{itemid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Recent Items (Pagination) ",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7a0f2f61-fdfc-41d5-85a9-d2e8e995781d",
								"type": "text/javascript",
								"exec": [
									"/**",
									" * Returns a random integer between min (inclusive) and max (inclusive)",
									" * Using Math.round() will give you a non-uniform distribution!",
									" */",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"///max is 2153",
									"var a = getRandomInt(1, 2153);",
									"",
									"pm.environment.set(\"startnumber\", a);",
									"",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0691c1a9-1c0f-4491-b9c1-510e84e08cef",
								"type": "text/javascript",
								"exec": [
									"console.log(environment.startnumber);",
									"//max is 2153",
									"",
									"pass = true;",
									"fail = false;",
									"",
									"var data = JSON.parse(responseBody);",
									"var a = data.meta.status",
									"var b = data.success.items",
									"var c = Object.keys(b)",
									"var d = data.success.total",
									"var e = data.success.start",
									"var f = environment.startnumber",
									"var g = data.meta.query.replace(\"/api/allitem/\",\"\")",
									"//console.log(data)",
									"//console.log(g)",
									"",
									"if (f == g) {",
									"    tests[\"Query matches startnumber\"] = pass;",
									"}",
									"else",
									"    tests[\"Query matches startnumber\"] = fail;",
									"",
									"if (a === \"success\") {",
									"    tests[\"Successful Run\"] = pass;",
									"}",
									"else",
									"    tests[\"Successful Run\"] = fail;",
									"",
									"if (e === environment.startnumber) {",
									"    tests[\"StartNumber is correct = \" + e] = pass;",
									"}",
									"else",
									"    tests[\"StartNumber is correct = \" + e] = fail;",
									"",
									"if (c.length === d ) {",
									"    tests[\"Number of items returned\"] = pass;",
									"}",
									"else",
									"    tests[\"Number of items returned\"] = fail;",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "https://openlegend.heromuster.com/api/allitem/{{startnumber}}",
							"protocol": "https",
							"host": [
								"openlegend",
								"heromuster",
								"com"
							],
							"path": [
								"api",
								"allitem",
								"{{startnumber}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Core Rules",
			"item": [
				{
					"name": "Feats",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1a86995a-4d4d-4c40-9d15-c480e43624a1",
								"type": "text/javascript",
								"exec": [
									"pass = true;",
									"fail = false;",
									"",
									"var data = JSON.parse(responseBody);",
									"var a = data.meta.status",
									"var b = data.success",
									"",
									"",
									"",
									"",
									"if (a === \"success\") {",
									"    tests[\"Successful Run\"] = pass;",
									"}",
									"else",
									"    tests[\"Successful Run\"] = fail;",
									"",
									"if (b.length === 78) {",
									"    tests[\"Number returned = \" + b.length] = pass;",
									"}",
									"else",
									"    tests[\"Number returned = \" + b.length] = fail;",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "https://openlegend.heromuster.com/api/feats",
							"protocol": "https",
							"host": [
								"openlegend",
								"heromuster",
								"com"
							],
							"path": [
								"api",
								"feats"
							]
						}
					},
					"response": []
				},
				{
					"name": "Filtered Feats ",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1a773f81-f2be-45cd-812c-c397e01e8d77",
								"type": "text/javascript",
								"exec": [
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"var a = ",
									"  getRandomInt(0, 9).toString() ",
									"+ getRandomInt(0, 9).toString()",
									"+ getRandomInt(0, 9).toString()",
									"+ getRandomInt(0, 9).toString()",
									"+ getRandomInt(0, 9).toString()",
									"+ getRandomInt(0, 9).toString()",
									"+ getRandomInt(0, 9).toString()",
									"+ getRandomInt(0, 9).toString()",
									"+ getRandomInt(0, 9).toString()",
									"+ getRandomInt(0, 9).toString()",
									"+ getRandomInt(0, 9).toString()",
									"+ getRandomInt(0, 9).toString()",
									"+ getRandomInt(0, 9).toString()",
									"+ getRandomInt(0, 9).toString()",
									"+ getRandomInt(0, 9).toString()",
									"+ getRandomInt(0, 9).toString()",
									"+ getRandomInt(0, 9).toString()",
									"+ getRandomInt(0, 9).toString();",
									"",
									"pm.environment.set(\"attributes\", a);",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "244ba0f7-a7d1-400b-b64a-a297632c2c0d",
								"type": "text/javascript",
								"exec": [
									"console.log(environment.attributes);",
									"",
									"pass = true;",
									"fail = false;",
									"",
									"var data = JSON.parse(responseBody);",
									"var a = data.meta.status",
									"var b = data.meta.query",
									"var c = b.replace(\"/api/feats/\", \"\")",
									"var d = environment.attributes",
									"//console.log(c)",
									"",
									"if (a === \"success\") {",
									"    tests[\"Successful Run\"] = pass;",
									"}",
									"else",
									"    tests[\"Successful Run\"] = fail;",
									"",
									"if (c === d) {",
									"    tests[\"Attributes matches query\"] = pass;",
									"}",
									"else",
									"    test[\"Attributes matches query\"] = fail;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "https://openlegend.heromuster.com/api/feats/{{attributes}}",
							"protocol": "https",
							"host": [
								"openlegend",
								"heromuster",
								"com"
							],
							"path": [
								"api",
								"feats",
								"{{attributes}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Boons",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0dcac3ce-bb71-454a-bbe6-bb9dceed98e1",
								"type": "text/javascript",
								"exec": [
									"pass = true;",
									"fail = false;",
									"",
									"var data = JSON.parse(responseBody);",
									"var a = data.meta.status",
									"var b = data.success.attributes",
									"var c = Object.keys(b)",
									"var d = data.success.boons",
									"var e = Object.keys(d)",
									"//console.log(data)",
									"//console.log(e.length)",
									"",
									"if (a === \"success\") {",
									"    tests[\"Successful Run\"] = pass;",
									"}",
									"else",
									"    tests[\"Successful Run\"] = fail;",
									"",
									"if (c.length === 18) {",
									"    tests[\"Number of Attributes returned = \" + c.length] = pass;",
									"}",
									"else",
									"    tests[\"Number of Attributes returned = \" + c.length] = fail;",
									"",
									"if (e.length === 31) {",
									"    tests[\"Number of Boons returns = \"+ e.length] = pass;",
									"}",
									"else",
									"    tests[\"Number of Boons returns = \"+ e.length] = fail;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "https://openlegend.heromuster.com/api/boons",
							"protocol": "https",
							"host": [
								"openlegend",
								"heromuster",
								"com"
							],
							"path": [
								"api",
								"boons"
							]
						}
					},
					"response": []
				},
				{
					"name": "Filtered Boons ",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ff597f3d-6993-47d9-9b50-6600099fee36",
								"type": "text/javascript",
								"exec": [
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"var a = ",
									"  getRandomInt(0, 9).toString() ",
									"+ getRandomInt(0, 9).toString()",
									"+ getRandomInt(0, 9).toString()",
									"+ getRandomInt(0, 9).toString()",
									"+ getRandomInt(0, 9).toString()",
									"+ getRandomInt(0, 9).toString()",
									"+ getRandomInt(0, 9).toString()",
									"+ getRandomInt(0, 9).toString()",
									"+ getRandomInt(0, 9).toString()",
									"+ getRandomInt(0, 9).toString()",
									"+ getRandomInt(0, 9).toString()",
									"+ getRandomInt(0, 9).toString()",
									"+ getRandomInt(0, 9).toString()",
									"+ getRandomInt(0, 9).toString()",
									"+ getRandomInt(0, 9).toString()",
									"+ getRandomInt(0, 9).toString()",
									"+ getRandomInt(0, 9).toString()",
									"+ getRandomInt(0, 9).toString();",
									"",
									"pm.environment.set(\"attributes\", a);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "72ed10aa-dbcd-42ee-9fdd-57a3bf4b35de",
								"type": "text/javascript",
								"exec": [
									"console.log(environment.attributes);",
									"",
									"pass = true;",
									"fail = false;",
									"",
									"var data = JSON.parse(responseBody);",
									"var a = data.meta.status",
									"var b = data.meta.query",
									"var c = b.replace(\"/api/boons/\", \"\")",
									"var d = environment.attributes",
									"var e = data.success.attributes",
									"var f = Object.keys(e)",
									"//console.log(data)",
									"",
									"",
									"if (a === \"success\") {",
									"    tests[\"Successful Run\"] = pass;",
									"}",
									"else",
									"    tests[\"Successful Run\"] = fail;",
									"",
									"if (c === d) {",
									"    tests[\"Attributes Match Query\"] = pass;",
									"}",
									"else ",
									"    tests[\"Attributes Match Query\"] = fail;",
									"",
									"if (f.length === 18) {",
									"    tests[\"Number of Attributes returned = \" + f.length] = pass;",
									"}",
									"else",
									"    tests[\"Number of Attributes returned = \" + f.length] = fail;",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "https://openlegend.heromuster.com/api/boons/{{attributes}}",
							"protocol": "https",
							"host": [
								"openlegend",
								"heromuster",
								"com"
							],
							"path": [
								"api",
								"boons",
								"{{attributes}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Banes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c7ffcb52-f597-4116-a2c3-bbe172f64757",
								"type": "text/javascript",
								"exec": [
									"pass = true;",
									"fail = false;",
									"",
									"var data = JSON.parse(responseBody);",
									"var a = data.meta.status",
									"var b = data.success",
									"var c = b.value",
									"var d = Object.keys(b.attributes)",
									"var e = Object.keys(b.banes)",
									"//console.log(data)",
									"//console.log(e.length)",
									"",
									"if (a === \"success\") {",
									"    tests[\"Successful Run\"] = pass;",
									"}",
									"else",
									"    tests[\"Successful Run\"] = fail;",
									"",
									"if (c === 1000000000000000000) {",
									"    tests[\"Value = \" + c] = pass;",
									"}",
									"else ",
									"    tests[\"Value = \" + c] = fail;",
									"",
									"if (d.length === 18) {",
									"    tests[\"Number of Attribute = \" + d.length] = pass;",
									"}",
									"else",
									"    tests[\"Number of Attribute = \" + d.length] = fail;",
									"",
									"if (e.length === 27) {",
									"    tests[\"Number of Attribute = \" + e.length] = pass;",
									"}",
									"else",
									"    tests[\"Number of Attribute = \" + e.length] = fail;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "https://openlegend.heromuster.com/api/banes",
							"protocol": "https",
							"host": [
								"openlegend",
								"heromuster",
								"com"
							],
							"path": [
								"api",
								"banes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Filtered Banes",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "89b74dee-6acf-41bb-b4e4-7cda4b4609da",
								"type": "text/javascript",
								"exec": [
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"var a = ",
									"  getRandomInt(0, 9).toString() ",
									"+ getRandomInt(0, 9).toString()",
									"+ getRandomInt(0, 9).toString()",
									"+ getRandomInt(0, 9).toString()",
									"+ getRandomInt(0, 9).toString()",
									"+ getRandomInt(0, 9).toString()",
									"+ getRandomInt(0, 9).toString()",
									"+ getRandomInt(0, 9).toString()",
									"+ getRandomInt(0, 9).toString()",
									"+ getRandomInt(0, 9).toString()",
									"+ getRandomInt(0, 9).toString()",
									"+ getRandomInt(0, 9).toString()",
									"+ getRandomInt(0, 9).toString()",
									"+ getRandomInt(0, 9).toString()",
									"+ getRandomInt(0, 9).toString()",
									"+ getRandomInt(0, 9).toString()",
									"+ getRandomInt(0, 9).toString()",
									"+ getRandomInt(0, 9).toString();",
									"",
									"pm.environment.set(\"attributes\", a);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2e4f8ccd-9619-46a9-8b4d-d529e7d8ccf4",
								"type": "text/javascript",
								"exec": [
									"console.log(environment.attributes);",
									"",
									"pass = true;",
									"fail = false;",
									"",
									"var data = JSON.parse(responseBody);",
									"var a = data.meta.status",
									"var b = data.meta.query",
									"var c = b.replace(\"/api/banes/\", \"\")",
									"var d = environment.attributes",
									"var e = data.success.attributes",
									"var f = Object.keys(e)",
									"",
									"",
									"if (a === \"success\") {",
									"    tests[\"Successful Run\"] = pass;",
									"}",
									"else",
									"    tests[\"Successful Run\"] = fail;",
									"",
									"if (c === d) {",
									"    tests[\"Attributes Match = \" + d] = pass;",
									"}",
									"else",
									"    tests[\"Attributes Match = \" + d] = fail;",
									"",
									"if (f.length === 18) {",
									"    tests[\"Number of Attribute = \" + f.length] = pass;",
									"}",
									"else",
									"    tests[\"Number of Attribute = \" + f.length] = fail;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "https://openlegend.heromuster.com/api/banes/{{attributes}}",
							"protocol": "https",
							"host": [
								"openlegend",
								"heromuster",
								"com"
							],
							"path": [
								"api",
								"banes",
								"{{attributes}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Perks",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "50ac00bc-b144-4b4f-81b4-495d2569e495",
								"type": "text/javascript",
								"exec": [
									"pass = true;",
									"fail = false;",
									"",
									"var data = JSON.parse(responseBody);",
									"var a = data.meta.status",
									"var b = data.success",
									"var c = Object.keys(b)",
									"//console.log(data)",
									"",
									"",
									"if (a === \"success\") {",
									"    tests[\"Successful Run\"] = pass;",
									"}",
									"else",
									"    tests[\"Successful Run\"] = fail;",
									"",
									"if (c.length === 35) {",
									"    tests[\"Number of Perks Returned = \" + c.length] = pass;",
									"}",
									"else",
									"    tests[\"Number of Perks Returned = \" + c.length] = fail;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "https://openlegend.heromuster.com/api/perks",
							"protocol": "https",
							"host": [
								"openlegend",
								"heromuster",
								"com"
							],
							"path": [
								"api",
								"perks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Flaws",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8f68e1c7-51c5-4637-9e36-f296468a2b30",
								"type": "text/javascript",
								"exec": [
									"pass = true;",
									"fail = false;",
									"",
									"var data = JSON.parse(responseBody);",
									"var a = data.meta.status",
									"var b = data.success",
									"var c = Object.keys(b)",
									"//console.log(c.length)",
									"",
									"",
									"if (a === \"success\") {",
									"    tests[\"Successful Run\"] = pass;",
									"}",
									"else",
									"    tests[\"Successful Run\"] = fail;",
									"",
									"if (c.length === 31) {",
									"    tests[\"Number of Flaws Returned = \" + c.length] = pass;",
									"}",
									"else",
									"    tests[\"Number of Flaws Returned = \" + c.length] = fail;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "https://openlegend.heromuster.com/api/flaws",
							"protocol": "https",
							"host": [
								"openlegend",
								"heromuster",
								"com"
							],
							"path": [
								"api",
								"flaws"
							]
						}
					},
					"response": []
				},
				{
					"name": "Core Weapons ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9574a6cb-c6dd-4c69-b462-f043e6ec25e2",
								"type": "text/javascript",
								"exec": [
									"pass = true;",
									"fail = false;",
									"",
									"var data = JSON.parse(responseBody);",
									"var a = data.meta.status",
									"var b = data.success",
									"var c = Object.keys(b)",
									"//console.log(c.length)",
									"",
									"if (a === \"success\") {",
									"    tests[\"Successful Run\"] = pass;",
									"}",
									"else",
									"    tests[\"Successful Run\"] = fail;",
									"",
									"if (c.length === 56) {",
									"    tests[\"Number of weapons returned = \" + c.length] = pass;",
									"}",
									"else",
									"    tests[\"Number of weapons returned = \" + c.length] = fail;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "https://openlegend.heromuster.com/api/weapons",
							"protocol": "https",
							"host": [
								"openlegend",
								"heromuster",
								"com"
							],
							"path": [
								"api",
								"weapons"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "36f78388-8bd7-474c-8013-cc14b9375629",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "81fc9749-b557-4fc5-bfdf-c12b714ddec1",
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Status code is 200\", function () {",
					"    pm.response.to.have.status(200);",
					"});"
				]
			}
		}
	]
}