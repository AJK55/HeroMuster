{
	"info": {
		"_postman_id": "2be0201a-cfa2-43e0-95c2-5535e8dad63e",
		"name": "HeroMuster",
		"description": "https://documenter.getpostman.com/view/2899728/heromuster-open-legend-api/7187afM?_ga=2.185710895.763695680.1534878107-1987030645.1534878107\n\n",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Character Builder",
			"item": [
				{
					"name": "Character by Character ID ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2776ef95-5695-4ee9-b4c7-97baf0d7a844",
								"type": "text/javascript",
								"exec": [
									"pass = true;",
									"fail = false;",
									"",
									"var data = JSON.parse(responseBody);",
									"var a = Object.keys(data.meta).length",
									"var b = Object.keys(data.success.character).length",
									"var c = data.success.characterid",
									"var d = environment.characterid",
									"var e = data.success.character.playername",
									"var f = data.meta.status",
									"",
									"if (f === \"success\") {",
									"    tests[\"Successful Run\"] = pass;",
									"}",
									"else",
									"    tests[\"Successful Run\"] = fail;",
									"//console.log(e)",
									"//console.log(data)",
									"",
									"if (a === 3) {",
									"    tests[\"Number of meta objects = \" + a] = pass;",
									"}",
									"else ",
									"    tests[\"Number of meta objects = \" + a] = fail;",
									"    ",
									"if (b === 123) {",
									"    tests[\"Number of character objects = \" + b ] = pass;",
									"}",
									"else",
									"    tests[\"Number of character objects = \" + b ] = fail;",
									"",
									"if (c === d) {",
									"    tests[\"Character ID = \" + d] = pass;",
									"}",
									"else",
									"    tests[\"Character ID = \" + d] = fail;",
									"",
									"if (environment.playerid === e) {",
									"    tests[\"PlayerName Matches PlayerID\"] = pass;",
									"}",
									"else if (environment.playerid != e) {",
									"    pm.environment.set(\"playerid\", e);",
									"    tests[\"PlayerName != PlayerID - Updated it\"] = pass;",
									"}",
									"else",
									"    tests[\"PlayerName Matches PlayerID\"] = fail;",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "https://openlegend.heromuster.com/api/character/{{characterid}}",
							"protocol": "https",
							"host": [
								"openlegend",
								"heromuster",
								"com"
							],
							"path": [
								"api",
								"character",
								"{{characterid}}"
							]
						},
						"description": "https://openlegend.heromuster.com/api/character/{{characterid}}\r\n\r\nReturn a specific character by its unique {{characterid}}. This is represented after character?s={{characterid}} when viewing through the website.\r\n"
					},
					"response": []
				},
				{
					"name": "Characters by Player ID ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aed99b37-c8eb-4dd4-b879-cce9a0d78d97",
								"type": "text/javascript",
								"exec": [
									"pass = true;",
									"fail = false;",
									"",
									"var data = JSON.parse(responseBody);",
									"var a = Object.keys(data.success.characters);",
									"var b = (a.includes(environment.characterid));",
									"var c = data.success.total",
									"var d = a.length //7",
									"var e = data.meta.status",
									"//console.log(data)",
									"",
									"if (e === \"success\") {",
									"    tests[\"Successful Run\"] = pass;",
									"}",
									"else",
									"    tests[\"Successful Run\"] = fail;",
									"",
									"",
									"if (b) {",
									"    tests[\"Character ID included\"] = pass;",
									"}",
									"else",
									"    tests[\"Character ID included\"] = fail;",
									"",
									"",
									"if (d === c) {",
									"    tests[\"Number of characters returned equals total\"] = pass;",
									"}",
									"else",
									"    tests[\"Number of characters returned equals total\"] = fail;",
									"",
									"",
									"",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "https://openlegend.heromuster.com/api/player/{{playerid}}",
							"protocol": "https",
							"host": [
								"openlegend",
								"heromuster",
								"com"
							],
							"path": [
								"api",
								"player",
								"{{playerid}}"
							]
						},
						"description": "https://openlegend.heromuster.com/api/player/{{playerid}}\r\n\r\nView all characters created by a specific player, determined by the Player Name field in the Character Builder. The Player Name is automatically converted into the {{playerid}}. This is represented after player?p={{playerid}} when viewing through the website.\r\n"
					},
					"response": []
				},
				{
					"name": "Recent Characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1b7f0719-f5a6-4f99-8b2f-5aec89b9feed",
								"type": "text/javascript",
								"exec": [
									"pass = true;",
									"fail = false;",
									"",
									"var data = JSON.parse(responseBody);",
									"var a = data.success.total;",
									"var b = data.success.characters;",
									"var c = Object.keys(b).length;",
									"var d = Object.keys(b);",
									"var e = environment.characterid;",
									"var f = d.includes(e);",
									"var g = data.meta.status",
									"//console.log(data)",
									"",
									"if (g === \"success\") {",
									"    tests[\"Successful Run\"] = pass;",
									"}",
									"else",
									"    tests[\"Successful Run\"] = fail;",
									"",
									"",
									"if (a === c) {",
									"    tests[\"Number of characters returned equals total number\"] = pass;",
									"}",
									"else ",
									"    tests[\"Number of characters returned equals total number\"] = fail;",
									"",
									"if (f === false) {",
									"    tests[\"Not included in returned characters - \" + e] = pass;",
									"}",
									"else ",
									"    tests[\"Not included in returned characters - \" + e] = fail;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "https://openlegend.heromuster.com/api/all",
							"protocol": "https",
							"host": [
								"openlegend",
								"heromuster",
								"com"
							],
							"path": [
								"api",
								"all"
							]
						},
						"description": "https://openlegend.heromuster.com/api/all\r\n\r\nReturn the most recent 50 character sheets created using the Character Builder.\r\n"
					},
					"response": []
				},
				{
					"name": "Recent Characters (Pagination) ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6806ef02-06f9-4227-b89d-3707758ec895",
								"type": "text/javascript",
								"exec": [
									"pass = true;",
									"fail = false;",
									"",
									"var data = JSON.parse(responseBody);",
									"var a = data.success.total;",
									"var b = data.success.characters;",
									"var c = Object.keys(b).length;",
									"var d = Object.keys(b);",
									"var e = environment.characterid;",
									"var f = d.includes(e);",
									"var g = data.meta.status",
									"//console.log(data)",
									"",
									"if (g === \"success\") {",
									"    tests[\"Successful Run\"] = pass;",
									"}",
									"else",
									"    tests[\"Successful Run\"] = fail;",
									"",
									"",
									"if (a === c) {",
									"    tests[\"Number of characters returned equals total number\"] = pass;",
									"}",
									"else ",
									"    tests[\"Number of characters returned equals total number\"] = fail;",
									"",
									"if (f === false) {",
									"    tests[\"Not included in returned characters - \" + e] = pass;",
									"}",
									"else ",
									"    tests[\"Not included in returned characters - \" + e] = fail;"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "https://openlegend.heromuster.com/api/all/{{startnumber}}",
							"protocol": "https",
							"host": [
								"openlegend",
								"heromuster",
								"com"
							],
							"path": [
								"api",
								"all",
								"{{startnumber}}"
							]
						},
						"description": "https://openlegend.heromuster.com/api/all/{{startnumber}}\r\n\r\nView recent characters created using the Character Builder, but specify the numeric starting position.\r\nReturns 50 results per request.\r\n"
					},
					"response": []
				}
			],
			"description": "https://openlegend.heromuster.com/character?s=dc7053a16984\n",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "aa96a2e6-1824-4288-92bf-b0328ee3041e",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "30b96895-ea3a-44d7-9221-cfa4e46d6106",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "NPC Generator",
			"item": [
				{
					"name": "Random NPC ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bc55ec29-e8bd-490a-bc1c-ce40b700c10c",
								"type": "text/javascript",
								"exec": [
									"pass = true;",
									"fail = false;",
									"",
									"var data = JSON.parse(responseBody);",
									"var a = data.meta.status",
									"var b = data.success",
									"var c = Object.keys(b)",
									"//console.log(data)",
									"//console.log(c)",
									"",
									"if (a === \"success\") {",
									"    tests[\"Successful Run\"] = pass;",
									"}",
									"else",
									"    tests[\"Successful Run\"] = fail;",
									"",
									"if (c.length === 16) {",
									"    tests[\"Number of success objects = \" + c.length] = pass;",
									"}",
									"else",
									"    tests[\"Number of success objects = \" + c.length] = fail;",
									" ",
									" "
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "https://openlegend.heromuster.com/api/npc",
							"protocol": "https",
							"host": [
								"openlegend",
								"heromuster",
								"com"
							],
							"path": [
								"api",
								"npc"
							]
						}
					},
					"response": []
				},
				{
					"name": "Random NPC at a Specific Level ",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6c1dc110-b841-4e44-a05e-e19b4d70f986",
								"type": "text/javascript",
								"exec": [
									"/**",
									" * Returns a random integer between min (inclusive) and max (inclusive)",
									" * Using Math.round() will give you a non-uniform distribution!",
									" */",
									"function getRandomInt(min, max) {",
									"    return Math.floor(Math.random() * (max - min + 1)) + min;",
									"}",
									"",
									"var a = getRandomInt(1, 20);",
									"",
									"pm.environment.set(\"level\", a);",
									"",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "51231c42-4116-479e-9d15-40d086a0b0e6",
								"type": "text/javascript",
								"exec": [
									"console.log(environment.level);",
									"",
									"pass = true;",
									"fail = false;",
									"",
									"var data = JSON.parse(responseBody);",
									"var a = data.meta.status",
									"var b = data.success",
									"var c = Object.keys(b)",
									"console.log(data)",
									"console.log(c.length)",
									"",
									"if (a === \"success\") {",
									"    tests[\"Successful Run\"] = pass;",
									"}",
									"else",
									"    tests[\"Successful Run\"] = fail;",
									"    ",
									"if (c.length === 16) {",
									"    tests[\"Number of success objects = \" + c.length] = pass;",
									"}",
									"else",
									"    tests[\"Number of success objects = \" + c.length] = fail;",
									" "
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "https://openlegend.heromuster.com/api//npc/{{level}}",
							"protocol": "https",
							"host": [
								"openlegend",
								"heromuster",
								"com"
							],
							"path": [
								"api",
								"",
								"npc",
								"{{level}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Extraordinary Item Builder",
			"item": []
		},
		{
			"name": "Core Rules",
			"item": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "36f78388-8bd7-474c-8013-cc14b9375629",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "81fc9749-b557-4fc5-bfdf-c12b714ddec1",
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Status code is 200\", function () {",
					"    pm.response.to.have.status(200);",
					"});"
				]
			}
		}
	]
}